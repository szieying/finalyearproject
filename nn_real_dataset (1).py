# -*- coding: utf-8 -*-
"""nn real dataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16sh64m6ub_F1BpdiIc4Gvninp5i-9rJu
"""

from __future__ import absolute_import, division, print_function

import os
import matplotlib.pyplot as plt
import pandas as pd
import tensorflow as tf
import numpy as np # linear algebra
from sklearn.naive_bayes import GaussianNB
from sklearn import model_selection
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
tf.enable_eager_execution()

train_dataset_url = "https://raw.githubusercontent.com/szieying/stroketest/master/nntrain.csv"

train_dataset_fp = tf.keras.utils.get_file(fname=os.path.basename(train_dataset_url),
                                           origin=train_dataset_url)

print(os.path.basename(train_dataset_url))

!head -n5 {train_dataset_fp}

# column order in CSV file
column_names = ['p_APLT',	'HPLD',	'IHD',	'AGE0',	'P_ACEI',	'SMOKER',	'P_ARB',	'P_LL', 'DV']

feature_names = column_names[:-1]
label_name = column_names[-1]

print (column_names)
print (label_name)

class_names = ['healthy', 'recurrent stroke']

batch_size = 6600

train_dataset = tf.data.experimental.make_csv_dataset(train_dataset_fp, 
                                                      batch_size,
                                                      column_names = column_names,
                                                      label_name = label_name,
                                                      num_epochs=1)

features, labels = next(iter(train_dataset))

features

def pack_features_vector(features, labels):
  """Pack the features into a single array."""
  features = tf.stack(list(features.values()), axis=1)
  return features, labels

train_dataset = train_dataset.map(pack_features_vector)

features, labels = next(iter(train_dataset))

print(features[:5])

model = tf.keras.Sequential([
  tf.keras.layers.Dense(128, activation=tf.nn.relu, input_shape=(8,)),  # input shape required
  tf.keras.layers.Dense(64, activation=tf.nn.selu),
  tf.keras.layers.Dense(64, activation=tf.nn.selu),
  tf.keras.layers.Dense(64, activation=tf.nn.selu),
  tf.keras.layers.Dense(10, activation=tf.nn.selu),
  ])

predictions = model(features)
predictions[:5]

print("Prediction: {}".format(tf.argmax(predictions, axis=1)))
print("    Labels: {}".format(labels))

print(predictions)

def loss(model, x, y):
  y_ = model(x)
  return tf.losses.sparse_softmax_cross_entropy(labels=y, logits=y_)


l = loss(model, features, labels)
print("Loss test: {}".format(l))

def grad(model, inputs, targets):
  with tf.GradientTape() as tape:
    loss_value = loss(model, inputs, targets)
  return loss_value, tape.gradient(loss_value, model.trainable_variables)

optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)

global_step = tf.Variable(0)

loss_value, grads = grad(model, features, labels)

print("Step: {}, Initial Loss: {}".format(global_step.numpy(),
                                          loss_value.numpy()))

optimizer.apply_gradients(zip(grads, model.trainable_variables), global_step)

print("Step: {},         Loss: {}".format(global_step.numpy(),
                                          loss(model, features, labels).numpy()))

## Note: Rerunning this cell uses the same model variables

from tensorflow import contrib
tfe = contrib.eager

# keep results for plotting
train_loss_results = []
train_accuracy_results = []

num_epochs = 201

for epoch in range(num_epochs):
  epoch_loss_avg = tfe.metrics.Mean()
  epoch_accuracy = tfe.metrics.Accuracy()

  # Training loop - using batches of 32
  for x, y in train_dataset:
    # Optimize the model
    loss_value, grads = grad(model, x, y)
    optimizer.apply_gradients(zip(grads, model.trainable_variables),
                              global_step)

    # Track progress
    epoch_loss_avg(loss_value)  # add current batch loss
    # compare predicted label to actual label
    epoch_accuracy(tf.argmax(model(x), axis=1, output_type=tf.int32), y)

  # end epoch
  train_loss_results.append(epoch_loss_avg.result())
  train_accuracy_results.append(epoch_accuracy.result())
  
  if epoch % 50 == 0:
    print("Epoch {:03d}: Loss: {:.3f}, Accuracy: {:.3%}".format(epoch,
                                                                epoch_loss_avg.result(),
                                                                epoch_accuracy.result()))

fig, axes = plt.subplots(2, sharex=True, figsize=(12, 8))
fig.suptitle('Training Metrics')

axes[0].set_ylabel("Loss", fontsize=14)
axes[0].plot(train_loss_results)

axes[1].set_ylabel("Accuracy", fontsize=14)
axes[1].set_xlabel("Epoch", fontsize=14)
axes[1].plot(train_accuracy_results);

test_url = "https://raw.githubusercontent.com/szieying/stroketest/master/nntest.csv"

test_fp = tf.keras.utils.get_file(fname=os.path.basename(test_url),
                                  origin=test_url)

!head -n5 {test_fp}

test_dataset = tf.contrib.data.make_csv_dataset(
    test_fp,
    batch_size, 
    column_names=column_names,
    label_name='DV',
    num_epochs=1,
    shuffle=False)

test_dataset = test_dataset.map(pack_features_vector)

test_accuracy = tfe.metrics.Accuracy()

for (x, y) in test_dataset:
  logits = model(x)
  prediction = tf.argmax(logits, axis=1, output_type=tf.int32)
  test_accuracy(prediction, y)

print("Test set accuracy: {:.3%}".format(test_accuracy.result()))

print(type(prediction.numpy()))

prediction_num = prediction.numpy()
y_num = y.numpy()

prediction_df = pd.DataFrame(prediction_num.reshape(6600,1))
y_df = pd.DataFrame(y_num.reshape(6600,1))

#Save the file to Excel
from pandas import ExcelWriter

writer = ExcelWriter('NNPredictions.xlsx')
prediction_df.to_excel(writer,'Sheet1')
y_df.to_excel(writer,'Sheet2')
writer.save()

tf.stack([y,prediction],axis=1)

a = tf.constant(labels)

b = tf.constant(tf.argmax(predictions, axis=1))


print(a)
print(b)

mse2 = tf.losses.mean_squared_error(a, b)
print(mse2)
#with tf.Session() as sess:
#    print(sess.run(mse2))