# -*- coding: utf-8 -*-
"""svm real dataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qARVlFwRiiz5rMDJDenjIoI9TtA2kC4C
"""

import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from sklearn import datasets
import sklearn.model_selection as model_selection
import pandas as pd
import tensorflow as tf
import os
url = 'https://raw.githubusercontent.com/szieying/stroketest/master/stroke11.csv'
df1 = tf.keras.utils.get_file(fname=os.path.basename(url),
                                           origin=url)

from numpy import genfromtxt
my_data = genfromtxt('/root/.keras/datasets/stroke11.csv', delimiter=',')

#iris = datasets.load_iris()
X = np.array([[x[0], x[1]] for x in my_data])
Y = np.array([1 if y[2] == 1 else -1 for y in my_data])
X_train, X_test, Y_train, Y_test = model_selection.train_test_split(X, Y, test_size=0.1)

print(Y)

x_data = tf.placeholder(shape=[None, 2], dtype=tf.float32)
y_target = tf.placeholder(shape=[None, 1], dtype=tf.float32)

A = tf.Variable(tf.random_normal(shape=[2, 1]))
b = tf.Variable(tf.random_normal(shape=[1, 1]))

model_output = tf.matmul(x_data, A) + b

# Declare vector L2 'norm' function squared
l2_norm = tf.reduce_sum(tf.square(A))

# Declare loss function
# Loss = max(0, 1-pred*actual) + alpha * L2_norm(A)^2
alpha = tf.constant([0.1])
classification_term = tf.reduce_sum(tf.maximum(0., 1. - model_output * y_target))
loss = classification_term + tf.multiply(alpha, l2_norm)

# Declare prediction function
prediction = tf.sign(model_output)
accuracy = tf.reduce_mean(tf.cast(tf.equal(prediction, y_target), tf.float32))

# Declare optimizer
my_opt = tf.train.GradientDescentOptimizer(0.01)
train_step = my_opt.minimize(loss)

batch_size = 2000

sess = tf.Session()
init = tf.global_variables_initializer()
sess.run(init)

loss_vec = []
train_accuracy = []
test_accuracy = []
for i in range(250):
    rand_index = np.random.choice(len(X_train), size=batch_size)
    rand_x = X_train[rand_index]
    rand_y = np.transpose([Y_train[rand_index]])
    sess.run(train_step, feed_dict={x_data: rand_x, y_target: rand_y})
    
    temp_loss = sess.run(loss, feed_dict={x_data: rand_x, y_target: rand_y})
    loss_vec.append(temp_loss)

    train_acc_temp = sess.run(accuracy, feed_dict={
        x_data: X_train,
        y_target: np.transpose([Y_train])})
    train_accuracy.append(train_acc_temp)

    test_acc_temp = sess.run(accuracy, feed_dict={
        x_data: X_test,
        y_target: np.transpose([Y_test])})
    test_accuracy.append(test_acc_temp)

    if (i + 1) % 50 == 0:
        print('Step #{} A = {}, b = {}'.format(
            str(i + 1),
            str(sess.run(A)),
            str(sess.run(b))
        ))
        print('Loss = ' + str(temp_loss))

# %%
setosa = X[Y == 1]
not_setosa = X[Y == -1]
plt.plot(setosa[:, 0], setosa[:, 1], 'go', label='setosa')
plt.plot(not_setosa[:, 0], not_setosa[:, 1], 'ro', label='not-setosa')

[[a1], [a2]] = sess.run(A)
[[b]] = sess.run(b)
plt.plot(X[:, 0], (-b - a1 * X[:, 0]) / a2)

plt.show()

# %%
# Plot train/test accuracies
plt.plot(train_accuracy, 'k-', label='Training Accuracy')
plt.plot(test_accuracy, 'r--', label='Test Accuracy')
plt.title('Train and Test Set Accuracies')
plt.xlabel('Generation')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()

# Plot loss over time
plt.plot(loss_vec, 'k-')
plt.title('Loss per Generation')
plt.xlabel('Generation')
plt.ylabel('Loss')
plt.show()